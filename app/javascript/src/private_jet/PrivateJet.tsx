/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.4.1 public/Private_Jet_C.gltf 
*/

import React, { useEffect, useRef, useMemo } from 'react'
import * as THREE from 'three'
import { Canvas, Props, extend, useFrame, useThree } from '@react-three/fiber';
import { useGLTF } from '@react-three/drei'
import { useControls } from 'leva';
import { OrbitControls } from 'three-stdlib';


export function PrivateJet({id, ...props}:Props) {
  const { nodes, materials } = useGLTF('/Private_Jet_C.gltf')
  const ambientColor = new THREE.Color(0x666666)

  // const { camera, gl } = useThree();

  // const cameraRef = useRef<THREE.PerspectiveCamera>(null);
  // const { cameraX, cameraY, cameraZ } = useControls(
  //   { 
  //     cameraY: { value: 0, step: .025 },
  //     cameraX: { value: 0, step: .025 },
  //     cameraZ: { value: 0, step: .025 }
  //   }
  // )

  // useFrame(() => {
  //   camera.position.set(cameraX, cameraY, cameraZ);
  //   camera.rotateOnAxis(new THREE.Vector3(cameraX, cameraY, cameraZ), 0.01);
  // });

  // useEffect(() => {
  //   controls.current = new OrbitControls(camera, gl.domElement);
  //   if (!controls.current) return;

  //   controls.current.enableDamping = true; // Enable smooth damping
  //   controls.current.dampingFactor = 0.25; // Damping factor
  //   controls.current.screenSpacePanning = false; // Disable panning in screen space
  //   controls.current.minDistance = 1; // Minimum zoom distance
  //   controls.current.maxDistance = 1000; // Maximum zoom distance
  //   controls.current.maxPolarAngle = Math.PI / 2; // Limit vertical rotation

  //   return () => {
  //     controls.current?.dispose();
  //   };
  // }, [gl]);

  // useFrame(() => {
  //   controls.current?.update();
  // });

  const eventHandlers = {
    onClick: undefined,
    onContextMenu: undefined,
    onDoubleClick: undefined,
    onPointerUp: undefined,
    onPointerDown: undefined,
    onPointerOver: undefined,
    onPointerOut: undefined,
    onPointerEnter: undefined,
    onPointerLeave: undefined,
    onPointerMove: undefined,
    onPointerCancel: undefined,
    onWheel: undefined,
  }

  const meshNodes: Record<string, THREE.Mesh> = nodes as Record<string, THREE.Mesh>

  return (
    <>
      {/* <CameraControls infinityDolly makeDefault camera={camera} domElement={ gl.domElement } /> */}
      <rectAreaLight color={0xffffff} intensity={1} width={10} height={10} position={[0, 2, 0]} rotation={[-Math.PI / 2, 0, 0]} />
      <ambientLight color={ambientColor} />
    <group {...props} {...eventHandlers} dispose={null} >
      {/* <MotionPathControls offset={0} focus={cam} damping={0.2}>
        <cubicBezierCurve3 v0={[0, 0, 0]} v1={[0, 0, 0]} v2={[0, 0, 0]} v3={[0, 0, 0]} />
      </MotionPathControls> */}
      <mesh geometry={meshNodes.kitchen_wall_01_1001.geometry} material={materials.mat_kitchen_wall_01_1001} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
      <mesh geometry={meshNodes.kitchen_wall_02_1001.geometry} material={materials.mat_kitchen_wall_01_1001} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
      <mesh geometry={meshNodes.kitchen_wall_03_1001.geometry} material={materials.mat_kitchen_wall_01_1001} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
      <mesh geometry={meshNodes.kitchen_wall_04_1001.geometry} material={materials.mat_kitchen_wall_01_1001} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
      <mesh geometry={meshNodes.kitchen_wall_05_1001.geometry} material={materials.mat_Glass} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
      <mesh geometry={meshNodes.kitchen_wall_06_1001.geometry} material={materials.mat_Glass} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
      <mesh geometry={meshNodes.Flooring_1002.geometry} material={materials.mat_Flooring_1002} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
      <mesh geometry={meshNodes.fuselage_walls_L_1003.geometry} material={materials.mat_fuselage_walls_1003} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
      <mesh geometry={meshNodes.fuselage_walls_R_1003.geometry} material={materials.mat_fuselage_walls_1003} rotation={[-Math.PI / 2, 0, -Math.PI]} scale={-0.01} />
      <mesh geometry={meshNodes.Portholes_R_1003.geometry} material={materials.mat_fuselage_walls_1003} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
      <mesh geometry={meshNodes.Portholes_L_1003.geometry} material={materials.mat_fuselage_walls_1003} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
      <mesh geometry={meshNodes.Ceiling_1003.geometry} material={materials.mat_fuselage_walls_1003} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
      <mesh geometry={meshNodes.Wall_panel_R_1004.geometry} material={materials.mat_Wall_panel_R_1004} rotation={[-Math.PI / 2, 0, -Math.PI]} scale={-0.01} />
      <mesh geometry={meshNodes.Wall_panel_L_1004.geometry} material={materials.mat_Wall_panel_R_1004} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
      <mesh geometry={meshNodes.table_01_1004.geometry} material={materials.mat_Wall_panel_R_1004} rotation={[-Math.PI / 2, 0, -Math.PI]} scale={-0.01} />
      <mesh geometry={meshNodes.table_02_1004.geometry} material={materials.mat_Wall_panel_R_1004} position={[2.453, 0, -1.492]} rotation={[-Math.PI / 2, 0, -Math.PI]} scale={-0.01} />
      <mesh geometry={meshNodes.table_03_1004.geometry} material={materials.mat_Wall_panel_R_1004} position={[0, 0, -1.492]} rotation={[-Math.PI / 2, 0, -Math.PI]} scale={-0.01} />
      <mesh geometry={meshNodes.Partial_fuselage_1005.geometry} material={materials.mat_Plane_1005} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
      <mesh geometry={meshNodes.Plane_1005.geometry} material={materials.mat_Plane_1005} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
      <mesh geometry={meshNodes.armchair_1006_01.geometry} material={materials.mat_armchair_1006} rotation={[-Math.PI / 2, 0, -Math.PI]} scale={-0.01} />
      <mesh geometry={meshNodes.armchair_1006_02.geometry} material={materials.mat_armchair_1006} position={[2.453, 0, 0]} rotation={[-Math.PI / 2, 0, -Math.PI]} scale={-0.01} />
      <mesh geometry={meshNodes.armchair_1006_03.geometry} material={materials.mat_armchair_1006} position={[2.453, 0, 0]} rotation={[-Math.PI / 2, 0, -Math.PI]} scale={-0.01} />
      <mesh geometry={meshNodes.armchair_1006_04.geometry} material={materials.mat_armchair_1006} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
      <mesh geometry={meshNodes.armchair_1006_05.geometry} material={materials.mat_armchair_1006} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
      <mesh geometry={meshNodes.armchair_1006_06.geometry} material={materials.mat_armchair_1006} rotation={[-Math.PI / 2, 0, -Math.PI]} scale={-0.01} />
      <mesh geometry={meshNodes.sofa_1007.geometry} material={materials.mat_sofa_1007} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
      <mesh geometry={meshNodes.Glass_1008.geometry} material={materials.mat_Glass} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
    </group>
    </>
  )
}

useGLTF.preload('/Private_Jet_C.gltf')
